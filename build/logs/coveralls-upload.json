{"repo_token":"HhjfZJ4EqhQjI8M7zwGALsDUYaVkLC30PpfAW","git":{"branch":"master","head":{"id":"'1a9f8a7d743b99a6fe86081fee616e9136d6c3e8","author_name":"James Sessford","author_email":"hello@jamessessford.com","committer_name":"James Sessford","committer_email":"hello@jamessessford.com","message":"maybe coveralls?'"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/jamessessford\/laravel-chunk-receiver.git"}]},"run_at":"2019-10-01 16:08:17 +0000","source_files":[{"name":"src\\ChunkReceiver.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver;\n\nuse Closure;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse JamesSessford\\LaravelChunkReceiver\\Contracts\\ChunkReceiver as Contract;\n\nfinal class ChunkReceiver implements Contract\n{\n    \/**\n     * @var Illuminate\\Contracts\\Foundation\\Application\n     *\/\n    private $app;\n\n    \/**\n     * Class constructor.\n     *\n     * @param  \\Illuminate\\Contracts\\Foundation\\Application $app\n     * @return void\n     *\/\n    public function __construct(Application $app)\n    {\n        $this->app = $app;\n    }\n\n    \/**\n     * Chunked upload handler.\n     *\n     * @param  string $name\n     * @param  closure $closure\n     * @return void\n     *\/\n    public function receive($name, Closure $closure)\n    {\n        $receivedFileHandler = $this->app->make(ReceivedFile::class);\n\n        return $receivedFileHandler->processUpload($name, $closure);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null,null,null,null,null,null,null,null,null,null,3,null,3,null,null]},{"name":"src\\ChunkReceiverServiceProvider.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse JamesSessford\\LaravelChunkReceiver\\Facades\\ChunkReceiver as ChunkReceiverFacade;\nuse JamesSessford\\LaravelChunkReceiver\\Contracts\\ChunkReceiver as ChunkReceiverContract;\n\nfinal class ChunkReceiverServiceProvider extends ServiceProvider\n{\n    \/**\n     * Indicates if loading of the provider is deferred.\n     *\n     * @var bool\n     *\/\n    protected $defer = false;\n\n    \/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     *\/\n    public function boot()\n    {\n        if ($this->app->runningInConsole()) {\n            $this->publishes([\n                __DIR__.'\/..\/config\/chunk-receiver.php' => config_path('chunk-receiver.php'),\n            ], 'config');\n        }\n    }\n\n    \/**\n     * Register bindings in the container.\n     *\n     * @return void\n     *\/\n    public function register()\n    {\n        $this->mergeConfigFrom(\n            __DIR__.'\/..\/config\/chunk-receiver.php',\n            'chunk-receiver'\n        );\n\n        $this->app->singleton(ChunkReceiverContract::class, function ($app) {\n            return new ChunkReceiver($app);\n        });\n\n        $this->app->alias(ChunkReceiverFacade::class, 'ChunkReceiver');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,5,5,null,5,null,null,null,null,null,null,null,null,5,5,5,null,null,null,3,5,null,5,5,null]},{"name":"src\\Contracts\\ChunkReceiver.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver\\Contracts;\n\nuse Closure;\n\ninterface ChunkReceiver\n{\n    \/**\n     * Handle an incoming request containing a chunked file.\n     *\/\n    public function receive($name, Closure $closure);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\\Exceptions\\Exception.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver\\Exceptions;\n\nclass Exception extends \\Exception\n{\n    \/\/\n}","coverage":[null,null,null,null,null,null,null,null]},{"name":"src\\Facades\\ChunkReceiver.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver\\Facades;\n\nuse Illuminate\\Support\\Facades\\Facade;\nuse JamesSessford\\LaravelChunkReceiver\\Contracts\\ChunkReceiver as ChunkReceiverContract;\n\nfinal class ChunkReceiver extends Facade\n{\n    \/**\n     * Get the registered name of the component.\n     *\n     * @return string\n     *\/\n    protected static function getFacadeAccessor()\n    {\n        return ChunkReceiverContract::class;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null]},{"name":"src\\ReceivedFile.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver;\n\nuse Closure;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Filesystem\\Filesystem;\nuse JamesSessford\\LaravelChunkReceiver\\Exceptions\\Exception;\nuse JamesSessford\\LaravelChunkReceiver\\Requests\\ChunkReceiverRequest as Request;\n\nfinal class ReceivedFile\n{\n    \/**\n     * @var Request\n     *\/\n    private $request;\n\n    \/**\n     * @var Illuminate\\Filesystem\\Filesystem\n     *\/\n    private $storage;\n\n    \/**\n     * @var int\n     *\/\n    private $maxAge = 600;\n\n    \/**\n     * Create new class instance.\n     *\n     * @param  Request $request\n     * @param  Filesystem $file\n     * @return void\n     *\/\n    public function __construct(Request $request, Filesystem $file)\n    {\n        $this->request = $request;\n        $this->storage = $file;\n    }\n\n    \/**\n     * Get chuck upload path.\n     *\n     * @return string\n     *\/\n    public function getChunkPath()\n    {\n        $path = config('chunk-receiver.chunk_path');\n\n        if (! $this->storage->isDirectory($path)) {\n            $this->storage->makeDirectory($path, 0777, true);\n        }\n\n        return $path;\n    }\n\n    \/**\n     * Process uploaded files.\n     *\n     * @param  string $name\n     * @param  \\Closure $closure\n     * @return array\n     *\/\n    public function processUpload($name, Closure $closure)\n    {\n        $response = [];\n        $response['jsonrpc'] = '2.0';\n\n        if ($this->withChunks()) {\n            $result = $this->chunks($name, $closure);\n        } else {\n            $result = $this->single($name, $closure);\n        }\n\n        $response['result'] = $result;\n\n        return $response;\n    }\n\n    \/**\n     * Handle whole file.\n     *\n     * @param  string $name\n     * @param  \\Closure $closure\n     * @return void\n     *\/\n    public function single($name, Closure $closure)\n    {\n        if ($this->request->hasFile($name)) {\n            return $closure($this->request->file($name));\n        }\n    }\n\n    \/**\n     * Handle chunked upload.\n     *\n     * @param  string $name\n     * @param  \\Closure $closure\n     * @return mixed\n     *\/\n    public function chunks($name, Closure $closure)\n    {\n        if (! $this->request->hasFile($name)) {\n            return;\n        }\n\n        $file = $this->request->file($name);\n        $chunk = (int) $this->request->input('chunk', false);\n        $chunks = (int) $this->request->input('chunks', false);\n        $originalName = $this->request->input('name');\n\n        $filePath = $this->getChunkPath().'\/'.$originalName.'.part';\n\n        $this->removeOldData($filePath);\n        $this->appendData($filePath, $file);\n\n        if ($chunk == $chunks - 1) {\n            $file = new UploadedFile($filePath, $originalName, 'blob', UPLOAD_ERR_OK, true);\n\n            return $closure($file);\n        }\n    }\n\n    \/**\n     * Remove old chunks.\n     *\n     * @param  string $filePath\n     * @return void\n     *\/\n    private function removeOldData($filePath)\n    {\n        if ($this->storage->exists($filePath) && ($this->storage->lastModified($filePath) < time() - $this->maxAge)) {\n            $this->storage->delete($filePath);\n        }\n    }\n\n    \/**\n     * Merge the new chunk with the previous chunks.\n     *\n     * @param  string $filePathPartial\n     * @param  \\Illuminate\\Http\\UploadedFile $file\n     * @return void\n     *\/\n    private function appendData($filePathPartial, UploadedFile $file)\n    {\n        if (! $out = @fopen($filePathPartial, 'ab')) {\n            throw new Exception('Failed to open output stream.', 102);\n        }\n\n        if (! $in = @fopen($file->getPathname(), 'rb')) {\n            throw new Exception('Failed to open input stream', 101);\n        }\n\n        while ($buff = fread($in, 4096)) {\n            fwrite($out, $buff);\n        }\n\n        @fclose($out);\n        @fclose($in);\n    }\n\n    \/**\n     * Is the request chunked or a single file?\n     *\n     * @return bool\n     *\/\n    public function withChunks()\n    {\n        return (bool) $this->request->input('chunks', false);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,4,null,null,null,null,null,null,null,null,3,null,3,3,null,null,3,null,null,null,null,null,null,null,null,null,null,null,4,4,null,4,2,null,2,null,null,4,null,4,null,null,null,null,null,null,null,null,null,null,null,2,2,null,0,null,null,null,null,null,null,null,null,null,null,3,0,null,null,3,3,3,3,null,3,null,3,3,null,2,1,null,1,null,2,null,null,null,null,null,null,null,null,null,3,0,null,3,null,null,null,null,null,null,null,null,null,null,3,0,null,null,3,1,null,null,2,2,null,null,2,2,2,null,null,null,null,null,null,null,null,4,null,null]},{"name":"src\\Requests\\ChunkReceiverRequest.php","source":"<?php\n\nnamespace JamesSessford\\LaravelChunkReceiver\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nfinal class ChunkReceiverRequest extends FormRequest\n{\n    public function authorize()\n    {\n        return true;\n    }\n\n    public function rules()\n    {\n        return [\n            'file' => 'required|file|max:'.(config('chunk-receiver.chunk_size') * 1024),\n            'chunks' => 'nullable|numeric',\n            'chunk' => 'nullable|numeric',\n            'name' => 'nullable|string',\n        ];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,4,4,4,4,null,null,null]}],"environment":{"packagist_version":"2.1.0"}}